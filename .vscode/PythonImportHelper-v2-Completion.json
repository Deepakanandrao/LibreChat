[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "read_env_file",
        "kind": 2,
        "importPath": "utils.update_env",
        "description": "utils.update_env",
        "peekOfCode": "def read_env_file(file_path):\n    \"\"\"Reads the .env file and returns the lines as a list.\"\"\"\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n    return lines\ndef write_env_file(file_path, lines):\n    \"\"\"Writes the updated lines to the specified .env file.\"\"\"\n    with open(file_path, 'w') as file:\n        file.writelines(lines)\ndef update_env_file_with_local_env(input_file_path, output_file_path):",
        "detail": "utils.update_env",
        "documentation": {}
    },
    {
        "label": "write_env_file",
        "kind": 2,
        "importPath": "utils.update_env",
        "description": "utils.update_env",
        "peekOfCode": "def write_env_file(file_path, lines):\n    \"\"\"Writes the updated lines to the specified .env file.\"\"\"\n    with open(file_path, 'w') as file:\n        file.writelines(lines)\ndef update_env_file_with_local_env(input_file_path, output_file_path):\n    \"\"\"\n    Reads the input .env file, updates the variables set to GET_FROM_LOCAL_ENV\n    with values from the local environment, and writes the result to the output .env file.\n    \"\"\"\n    lines = read_env_file(input_file_path)",
        "detail": "utils.update_env",
        "documentation": {}
    },
    {
        "label": "update_env_file_with_local_env",
        "kind": 2,
        "importPath": "utils.update_env",
        "description": "utils.update_env",
        "peekOfCode": "def update_env_file_with_local_env(input_file_path, output_file_path):\n    \"\"\"\n    Reads the input .env file, updates the variables set to GET_FROM_LOCAL_ENV\n    with values from the local environment, and writes the result to the output .env file.\n    \"\"\"\n    lines = read_env_file(input_file_path)\n    updated_lines = []\n    # Regex pattern to match lines ending with \"GET_FROM_LOCAL_ENV\"\n    env_var_pattern = re.compile(r'^\\s*([A-Z_]+)=GET_FROM_LOCAL_ENV\\s*$')\n    missing_vars = []",
        "detail": "utils.update_env",
        "documentation": {}
    }
]